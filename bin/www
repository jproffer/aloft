#!/usr/bin/env node

// Module dependencies.
const app = require('../app');
const cluster = require('cluster');
const debug = require('debug')('aloft:server');
const http = require('http');
const mongoose = require('mongoose');
const os = require('os');
const redisPubSub = require('sharedb-redis-pubsub')('redis://localhost:6379');
const ShareDB = require('sharedb');
const ShareDBMongo = require('sharedb-mongo')('mongodb://localhost:27017/test');
const WebSocket = require('ws');
const WebSocketJSONStream = require('websocket-json-stream');

const shareDbOptions = {
  db: ShareDBMongo,
  pubsub: redisPubSub
};

if (cluster.isMaster) {
  console.log(`Master process, ${process.pid} is running.`);

  // Calculates the number of available CPUs and
  // runs that many threaded versions of the server.
  for (let i = 0; i < os.cpus().length; i++) {
    cluster.fork();
  }

  cluster.on('exit', (worker, code, signal) => {
    console.log(
      `Cluster worker ${process.pid} has died.
      Exit code: ${code}
      Signal: ${signal}`);
  });
} else {

  // After forking, create and start the server.
  createServer();
}

// Function to create the server.
function createServer() {

  // Get port from environment and store in Express.
  const port = normalizePort(process.env.PORT || '5000');
  app.set('port', port);

  // Create HTTP server.
  const server = http.createServer(app);

  // Create a new ShareDB server.
  const backend = new ShareDB(shareDbOptions);

  // Listen on provided port, on all network interfaces.
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  // Start up ShareDB server and connect any
  // incoming WebSocket connection to ShareDB.
  const wsc = new WebSocket.Server({server: server});

  wsc.on('connection', function(ws, req) {

    // Test message.
    ws.on('message', data => {
      if (data === 'ping') {
       ws.emit('pong');
      }
    });

    ws.on('message', data => {
      console.log(data);
    });

    ws.on('close', function() {
      console.log('disconnected');
    });

    const stream = new WebSocketJSONStream(ws);
    backend.listen(stream);
  });

  // Normalize a port into a number, string, or false.
  function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {

      // named pipe
      return val;
    }

    if (port >= 0) {

      // Port number.
      return port;
    }

    return false;
  }

  // Event listener for HTTP server "error" event.
  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    const bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  // Event listener for HTTP server "listening" event.
  function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }

  // Lets developer know that everything is A-okay.
  process.env.NODE_ENV === 'dev'
    ? console.log(`Server is up and running on port: ${port}`)
    : '';
}